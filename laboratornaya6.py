# -*- coding: utf-8 -*-
"""LABORATORNAYA6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WSwvvOnXQcjPMW07RXpWexCHYzJ4SlWO
"""

celsius=[[-67.0],[-34.0],[0],[34.0],[54.0],[67.0],[100]]
fahrenheit=[[-88.6],[-29.2],[32.0],[93.2],[129.2],[152.6],[212.0]]

import matplotlib.pyplot as plt

plt.figure(figsize=(15,8), dpi=50)
plt.scatter(celsius, fahrenheit, label='входные зачения', color='green', marker='$f$');
plt.xlabel('celsius')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(celsius,fahrenheit):
  print(f'цельсия{c}=фаренгейт{f}')
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(celsius, fahrenheit)
lr.predict([[256],[123]])
lr.coef_
lr.intercept_
celsius_test = [[-50],[10],[30],[20],[10],[70],[87]]
fahrenheit_test = lr.predict(celsius_test)
fahrenheit_test

for c,f in zip(celsius_test,fahrenheit_test):
  print(f'цельсия{c} фаренгейт{f}')

import numpy as np

x_range = np.arange(-70, 120)
y_range = x_range*1.8+32

plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, label='уравнение', linewidth='1')
plt.scatter(celsius,fahrenheit, label='входные данные', color='green')
plt.scatter(celsius_test,fahrenheit_test, label='предсказанное значение', color='blue')
plt.xlabel('Цельсия')
plt.ylabel('Фаренгейта')
plt.legend()
plt.grid(True)
plt.show()

#ЭТО ЧЕРЕПАХА, ЗАДАНИЕ ПОВЫШЕННОЙ СЛОЖНОСТИ

x=[[4],[3],[2],[1],[1],[2],[1],[1],[2],[1],[1],[2],[3],[4],[5],[7],[6],[6],[8],[9],[11],[11],[10],[12],[13],[14],[15],[16],[16],[15],[16],[16],[15],[16],[16],[15],[14],[13],[12],[5],[4]]
y=[[1],[0],[0],[1],[2],[3],[4],[16],[17],[18],[19],[20],[20],[19],[20],[20],[22],[24],[25],[25],[24],[22],[20],[20],[19],[20],[20],[19],[18],[17],[16],[4],[3],[2],[1],[0],[0],[1],[0],[0],[1]]

import matplotlib.pyplot as plt

plt.figure(figsize=(15,20), dpi=50)
plt.plot(x, y, label='уравнение', linewidth='1')
plt.grid(True)
plt.show()

#####ЗАДАНИе ПОВЫШЕННОЙ СЛОЖНОСТИ ФЭШН МНИСТ. ВРОДЕ РАЗОБРАЛ, НО БЕЗ ГАЙДОВ ПОВТОРИТЬ НЕ СМОГУ
from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf
import tensorflow_datasets as tfds
import math
import numpy as np
import matplotlib.pyplot as plt
import tqdm
import tqdm.auto
tqdm.tqdm = tqdm.auto.tqdm

print(tf.__version__)

dataset, metadata = tfds.load('fashion_mnist', as_supervised=True, with_info=True)
train_dataset, test_dataset = dataset['train'], dataset['test']

class_names = ['Футболка / топ', "Шорты", "Свитер", "Платье", "Плащ", "Сандали", "Рубашка", "Кроссовок", "Сумка","Ботинок"]

num_train_examples = metadata.splits['train'].num_examples
num_test_examples = metadata.splits['test'].num_examples
print('Количество тренировочных экземпляров: {}'.format(num_train_examples))
print('Количество тестовых экземпляров: {}'.format(num_test_examples))

def normalize(images, labels):
  images = tf.cast(images, tf.float32)
  images /= 255
  return images, labels
train_dataset = train_dataset.map(normalize)
test_dataset = test_dataset.map(normalize)

plt.figure(figsize=(10,10))
i = 0
for (image, label) in test_dataset.take(25):
  image = image.numpy().reshape((28,28))
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(image, cmap=plt.cm.binary)
  plt.xlabel(class_names[label])
  i += 1
plt.show()

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28, 1)),
    tf.keras.layers.Dense(128, activation=tf.nn.relu),
    tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])

model.compile(optimizer='adam',
             loss='sparse_categorical_crossentropy',
             metrics=['accuracy'])

BATCH_SIZE = 32
train_dataset = train_dataset.repeat().shuffle(num_train_examples).batch(BATCH_SIZE)
test_dataset = test_dataset.batch(BATCH_SIZE)

model.fit(train_dataset, epochs=5, steps_per_epoch=math.ceil(num_train_examples/BATCH_SIZE))

test_loss, test_accuracy = model.evaluate(test_dataset, steps=math.ceil(num_test_examples/BATCH_SIZE))
print("Точность на тестовом наборе данных: ", test_accuracy)

#1
fahrenheit = [[-67.0],[-34.0],[0],[34.0],[54.0],[67.0],[100]]
kelvin = [[218.1],[236.5],[255.4],[274.3],[285.4],[292.6],[310.9]]

import matplotlib.pyplot as plt

plt.figure(figsize=(15,8), dpi=50)
plt.scatter(kelvin, fahrenheit, label='входные данные', color='green', marker='$f$');
plt.xlabel('kelvin')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(kelvin, fahrenheit):
    print(f'кельвин{c}= фаренгейт {f}')

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(kelvin, fahrenheit)
lr.predict([[256], [123]])
lr.coef_
lr.intercept_
kelvin_test = [[-50], [10], [30], [20], [10], [70], [87]]
fahrenheit_test = lr.predict(kelvin_test)
fahrenheit_test

import numpy as np

x_range = np.arange(-70, 120)
y_range = (x_range-273)*9/5+32

plt.figure(figsize=(15,8), dpi=280)
plt.plot(x_range, y_range, label='уравнение', linewidth='1')
plt.scatter(x_range, y_range, label='входные данные', color='blue')
plt.scatter(kelvin_test, fahrenheit_test, label='предсказанное значение', color='red')
plt.xlabel('Кельвина')
plt.ylabel('Фаренгейта')
plt.legend()
plt.grid(True)
plt.show()

#второе я сделал

#3
import matplotlib.pyplot as plt
import numpy as np

index = np.arange(3)
values = [1,3,5]
plt.bar(index, values)
plt.xticks(index+0.4, ['Apple','Banana','Something else'])
plt.show()

from matplotlib import colors
labels = ['Apple', 'Banana', 'Something else']
values = [5, 10, 85]
colors = ['green', 'yellow', 'red']
plt.pie(values, labels=labels, colors=colors)
plt.axis('equal')
plt.show()

import pandas as pd

data = {'series1': [1,2,3],
        'series2': [3,7,1],
        'series3': [10,1,7]}
df = pd.DataFrame(data)
df.plot(kind='bar',stacked=True)
plt.show()

#44444444444444
import math

math.e

math.pi

math.nan

math.factorial(18)

math.gcd(18, 128)